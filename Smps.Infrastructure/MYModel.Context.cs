//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Smps.Infrastructure
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MYEntity : DbContext
    {
        public MYEntity()
            : base("name=MYEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<HolderDetail> HolderDetails { get; set; }
        public virtual DbSet<SeekerDetail> SeekerDetails { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int holderdatainsertion(Nullable<int> empNo, string parkingSlotNumber, string createdDate, string slotReleasedDate, Nullable<int> allocationType, Nullable<int> operationType)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            var parkingSlotNumberParameter = parkingSlotNumber != null ?
                new ObjectParameter("ParkingSlotNumber", parkingSlotNumber) :
                new ObjectParameter("ParkingSlotNumber", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var slotReleasedDateParameter = slotReleasedDate != null ?
                new ObjectParameter("SlotReleasedDate", slotReleasedDate) :
                new ObjectParameter("SlotReleasedDate", typeof(string));
    
            var allocationTypeParameter = allocationType.HasValue ?
                new ObjectParameter("AllocationType", allocationType) :
                new ObjectParameter("AllocationType", typeof(int));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("holderdatainsertion", empNoParameter, parkingSlotNumberParameter, createdDateParameter, slotReleasedDateParameter, allocationTypeParameter, operationTypeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CheckAndAllocateslote()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckAndAllocateslote");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_holderdatainsertion(Nullable<int> empNo, string parkingSlotNumber, string createdDate, string slotReleasedDate, Nullable<int> allocationType, Nullable<int> operationType)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            var parkingSlotNumberParameter = parkingSlotNumber != null ?
                new ObjectParameter("ParkingSlotNumber", parkingSlotNumber) :
                new ObjectParameter("ParkingSlotNumber", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var slotReleasedDateParameter = slotReleasedDate != null ?
                new ObjectParameter("SlotReleasedDate", slotReleasedDate) :
                new ObjectParameter("SlotReleasedDate", typeof(string));
    
            var allocationTypeParameter = allocationType.HasValue ?
                new ObjectParameter("AllocationType", allocationType) :
                new ObjectParameter("AllocationType", typeof(int));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_holderdatainsertion", empNoParameter, parkingSlotNumberParameter, createdDateParameter, slotReleasedDateParameter, allocationTypeParameter, operationTypeParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_seekerdetails(Nullable<int> empNo, Nullable<int> parkingSlotNumber, string createdDate, string slotReleasedDate, Nullable<int> allocationType, Nullable<int> operationType)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            var parkingSlotNumberParameter = parkingSlotNumber.HasValue ?
                new ObjectParameter("ParkingSlotNumber", parkingSlotNumber) :
                new ObjectParameter("ParkingSlotNumber", typeof(int));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var slotReleasedDateParameter = slotReleasedDate != null ?
                new ObjectParameter("SlotReleasedDate", slotReleasedDate) :
                new ObjectParameter("SlotReleasedDate", typeof(string));
    
            var allocationTypeParameter = allocationType.HasValue ?
                new ObjectParameter("AllocationType", allocationType) :
                new ObjectParameter("AllocationType", typeof(int));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_seekerdetails", empNoParameter, parkingSlotNumberParameter, createdDateParameter, slotReleasedDateParameter, allocationTypeParameter, operationTypeParameter);
        }
    
        public virtual int sp_UpadtingOperationandallocation(Nullable<int> empNo, string createdDate)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpadtingOperationandallocation", empNoParameter, createdDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpadtingOperationandallocation(Nullable<int> empNo, string createdDate)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpadtingOperationandallocation", empNoParameter, createdDateParameter);
        }
    }
}
